09.13
    프런트에서 요청하면 html로 응답하기
    json 형태로 주기 -> js에서 jswon 데이터를 가지고 보여주기
    jquery를 사용해서 ajax 예제 사용해보기

09.14
    1. db table (user or member), seq,id, pw
    2. l    ogin.html ( login 페이지)   /login 페이지 만들기
    3. 로그인 버튼을 누르면 -> xhr 요청
    3-1 파라미터에 넣어보기 (localhost:9999/api/login?id=1111&pw=11111) -- get
    3-2 json 형태로 데이터 전송 -- post
    4. 디비에 있는 데이터와 맞는지 확인 한 다음 json 데이터로 응답을 해준다.
    {
    success:false,
    message:"에러 문구"
    }
    5. 성공했을 경우, / url로 가야한다. 인터셉터,    리다이렉트(redirect ) 루트로 location.href

09.15
    bestProducts의 테이블 만들기 (id, produdctID), product ==> join쿼리
    RDB : 회원 테이블에 구매한 상품 목록을 넣고 싶을 때, produdct, user | orderedProduct, bestProducts

    ㄱRDB(정형화 된 데이터) 계속 성능을 올려줘야 한다., 스케일 업
    noSQL(SQL + 알파), 분산 스케일 아웃, 비정형화 된 데이터,
    외래키

09.16(쿠키)
    gmarket - login.html (아이디 기억하기) 
            로그인 버튼을 눌렀고 아이디 기억하기 누르면 쿠키를 만들고 새로고침 햇을 때, 쿠키에 있는 아이디가 있어야 하고 아이디 기억하기 체크 되어 있어야 한다.

        2. gmarket => 로그인 했을 때, 아이디이름을 ㅇㅇㅇ님 안녕하세요, 로그아웃 버튼, 로그아웃 버튼 누르면 로그아웃 하기(로그인 페이지로 넘어가기)
        3. 내가 로그인이 되어 있는 상황이라면 main페이지로 오기 

09.17
    hide(), show()
    정규 표현식, 캐싱(데이터를 직접 가져오기 전에 내가 데이터를 관리한다. 주기)
                ajax도 캐싱을 한다. 브라우저의 캐싱을 막는 법(의미없는 시간값을 준다.)
    <세션>
        좁은 의미의 세션, 넓은 의미의 세션
            좁은 의미의 세션 - 웹 서버에 데이터를 저장하고 있는 것,
            넣은 의미의 세션 - 사용자가 웹 서비스르 ㄹ 한번 사용해보는 것을 말한다. 
        세션 아이디를 가지고 어디서 요청을 보낸 누구인지 알 수 있다. 
        쿠키는 요청을 보낼 때 무조건 헤더에 붙여진다. 
        웹 서비스를 한 번 사용해보는 것
        로그인을 해놓고 오랫동안 안 쓰면 로그아웃되어 짐(세션 끊김)
        웹 로그 분석할 때, 마켓팅에도 도움이 될 수 있도록 
        세션 아이디를 쿠키에 저장해준다. (response heade-> set-cookie: ~) set-cookies는 
        서버가 세션아이디를 주면서 쿠키에 저장해라.(웹 서비스에 해준다.)
        haeder-{"content-type : ~,
        set-cookie : 'sesionid=123"}
        세션아이디는 uuid를 준다.
        서버는 세션드을 모두 가지고 있음
        sessions{ "999":{~}}
        서버에서 데이터르르 제공해야 할 때, ${loginID} ㅓ섭에서 치환

        모든 페이지를 로그인을 필요로 할 때

        고통으로 사용하면 상수로 빼기
        request header, respone haeder, 템플릿 엔진, interceptor, postman, curl